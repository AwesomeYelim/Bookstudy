import { asyncToGenerator as _asyncToGenerator, regeneratorRuntime as _regeneratorRuntime } from './_virtual/_rollupPluginBabelHelpers.mjs';
import { isIE } from './device/isIE.mjs';

function writeText(_x) {
  return _writeText.apply(this, arguments);
}

function _writeText() {
  _writeText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(text) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!isIE()) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", copyToClipboard(text));

          case 2:
            if (clipboardSupported()) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", false);

          case 4:
            _context.prev = 4;
            _context.next = 7;
            return navigator.clipboard.writeText(text);

          case 7:
            return _context.abrupt("return", true);

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](4);
            return _context.abrupt("return", copyToClipboard(text));

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 10]]);
  }));
  return _writeText.apply(this, arguments);
}

function clipboardSupported() {
  return navigator.clipboard != null;
}

var clipboard = {
  writeText: writeText
};

function copyToClipboard(text) {
  if (!clipboardCopySupported()) {
    return false;
  }

  copy(text);
  return true;
}

function clipboardCopySupported() {
  var _document$queryComman, _document$queryComman2, _document;

  return (_document$queryComman = (_document$queryComman2 = (_document = document).queryCommandSupported) === null || _document$queryComman2 === void 0 ? void 0 : _document$queryComman2.call(_document, 'copy')) !== null && _document$queryComman !== void 0 ? _document$queryComman : false;
}

function isIOS() {
  return navigator.userAgent.match(/ipad|iphone/i) != null;
}

function copy(text) {
  var focusingContainer = document.body;
  var textArea = document.createElement('textArea');
  textArea.value = text;
  textArea.contentEditable = 'true';
  textArea.readOnly = false;
  textArea.style.userSelect = 'text';
  textArea.style.webkitUserSelect = 'text';
  focusingContainer.insertBefore(textArea, focusingContainer.firstChild);

  if (isIOS()) {
    var range = document.createRange();
    range.selectNodeContents(textArea);
    var selection = window.getSelection();

    if (selection !== null) {
      selection.removeAllRanges();
      selection.addRange(range);
    }

    textArea.setSelectionRange(0, 999999);
  } else {
    textArea.select();
  }

  document.execCommand('copy');
  focusingContainer.removeChild(textArea);
}

export { clipboard };
