/** @tossdocs-ignore */
function parseHexValueStr(str) {
  return parseInt(str, 16);
}

function isRGBDecimalValue(rgbDecimal) {
  return 0 <= rgbDecimal && rgbDecimal <= 255;
}
function isAlphaValue(alpha) {
  return 0 <= alpha && alpha <= 1;
}
function hexToRgba(hex) {
  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  if (!isAlphaValue(alpha)) {
    throw new Error("\uC798\uBABB\uB41C \uC54C\uD30C\uAC12 \uC785\uB2C8\uB2E4(0~1): ".concat(alpha));
  }

  hex = hex.length === 7 ? hex.slice(1) : hex;
  var r = parseHexValueStr(hex.slice(0, 2));
  var g = parseHexValueStr(hex.slice(2, 4));
  var b = parseHexValueStr(hex.slice(4, 6));

  if ([r, g, b].some(function (x) {
    return Number.isNaN(x) || !isRGBDecimalValue(x);
  })) {
    throw new Error("\uC798\uBABB\uB41C hex\uAC12 \uC785\uB2C8\uB2E4.: ".concat(hex));
  }

  return "rgba(".concat(r, ",").concat(g, ",").concat(b, ",").concat(alpha, ")");
}

export { hexToRgba, isAlphaValue, isRGBDecimalValue };
