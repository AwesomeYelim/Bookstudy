{"ast":null,"code":"import { rest } from 'msw';\nimport { z } from 'zod';\nimport { createKeypadResponse } from './data/tossWorld';\nconst keypadResponseMap = new Map();\nexport function handlers() {\n  return [rest.post('/api/keypad', createKeypad), rest.post('/api/password', submitPassword)];\n}\nconst createKeypad = (_, res, ctx) => {\n  const keypadResponse = createKeypadResponse();\n  keypadResponseMap.set(keypadResponse.uid, keypadResponse);\n  return res(ctx.status(200), ctx.json(keypadResponse));\n};\nconst KeypadInputResultSchema = z.object({\n  uid: z.string(),\n  coords: z.array(z.object({\n    x: z.number(),\n    y: z.number()\n  }))\n});\nconst submitPassword = (req, res, ctx) => {\n  const {\n    password,\n    confirmPassword\n  } = z.object({\n    password: KeypadInputResultSchema,\n    confirmPassword: KeypadInputResultSchema\n  }).parse(req.body);\n  if (password.uid === confirmPassword.uid) {\n    return res(ctx.status(400, 'You must use two different keypads'));\n  }\n  const passwordKeypad = keypadResponseMap.get(password.uid);\n  const confirmPasswordKeypad = keypadResponseMap.get(confirmPassword.uid);\n  if (passwordKeypad == null || confirmPasswordKeypad == null) {\n    return res(ctx.status(404, 'Keypad not found'));\n  }\n  try {\n    if (password.coords.length !== 6 || confirmPassword.coords.length !== 6) {\n      return res(ctx.status(400, 'Password must be entered as 6 characters'));\n    }\n    const passwordKeys = password.coords.map(({\n      x,\n      y\n    }) => extractTestIdFromSVG(passwordKeypad.keypad.svgGrid[x][y]));\n    const confirmPasswordKeys = confirmPassword.coords.map(({\n      x,\n      y\n    }) => extractTestIdFromSVG(confirmPasswordKeypad.keypad.svgGrid[x][y]));\n    if (passwordKeys.includes('blank') || confirmPasswordKeys.includes('blank')) {\n      return res(ctx.status(400, \"You can't enter a blank\"));\n    }\n    if (passwordKeys.join('') !== confirmPasswordKeys.join('')) {\n      return res(ctx.status(400, 'Passwords do not match'));\n    }\n    return res(ctx.status(200), ctx.text(passwordKeys.join('')));\n  } catch {\n    return res(ctx.status(400, 'input decryption failed'));\n  }\n};\nfunction extractTestIdFromSVG(svgElement) {\n  const regex = /data-testid=\"([^\"]+)\"/;\n  const matches = svgElement.match(regex);\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n  return '';\n}","map":{"version":3,"names":["rest","z","createKeypadResponse","keypadResponseMap","Map","handlers","post","createKeypad","submitPassword","_","res","ctx","keypadResponse","set","uid","status","json","KeypadInputResultSchema","object","string","coords","array","x","number","y","req","password","confirmPassword","parse","body","passwordKeypad","get","confirmPasswordKeypad","length","passwordKeys","map","extractTestIdFromSVG","keypad","svgGrid","confirmPasswordKeys","includes","join","text","svgElement","regex","matches","match"],"sources":["/Users/hongyelim/Study/Assignment/toss-fe-next2023-feature/src/_tosslib/server/handlers.ts"],"sourcesContent":["import { rest } from 'msw';\nimport { z } from 'zod';\nimport { CreateKeypadResponse, createKeypadResponse } from './data/tossWorld';\n\nconst keypadResponseMap = new Map<string, CreateKeypadResponse>();\n\nexport function handlers() {\n  return [rest.post('/api/keypad', createKeypad), rest.post('/api/password', submitPassword)];\n}\n\nconst createKeypad: Parameters<typeof rest.post>[1] = (_, res, ctx) => {\n  const keypadResponse = createKeypadResponse();\n\n  keypadResponseMap.set(keypadResponse.uid, keypadResponse);\n\n  return res(ctx.status(200), ctx.json(keypadResponse));\n};\n\nconst KeypadInputResultSchema = z.object({\n  uid: z.string(),\n  coords: z.array(z.object({ x: z.number(), y: z.number() })),\n});\n\nconst submitPassword: Parameters<typeof rest.post>[1] = (req, res, ctx) => {\n  const { password, confirmPassword } = z\n    .object({ password: KeypadInputResultSchema, confirmPassword: KeypadInputResultSchema })\n    .parse(req.body);\n\n  if (password.uid === confirmPassword.uid) {\n    return res(ctx.status(400, 'You must use two different keypads'));\n  }\n\n  const passwordKeypad = keypadResponseMap.get(password.uid);\n  const confirmPasswordKeypad = keypadResponseMap.get(confirmPassword.uid);\n\n  if (passwordKeypad == null || confirmPasswordKeypad == null) {\n    return res(ctx.status(404, 'Keypad not found'));\n  }\n\n  try {\n    if (password.coords.length !== 6 || confirmPassword.coords.length !== 6) {\n      return res(ctx.status(400, 'Password must be entered as 6 characters'));\n    }\n\n    const passwordKeys = password.coords.map(({ x, y }) => extractTestIdFromSVG(passwordKeypad.keypad.svgGrid[x][y]));\n    const confirmPasswordKeys = confirmPassword.coords.map(({ x, y }) =>\n      extractTestIdFromSVG(confirmPasswordKeypad.keypad.svgGrid[x][y])\n    );\n\n    if (passwordKeys.includes('blank') || confirmPasswordKeys.includes('blank')) {\n      return res(ctx.status(400, \"You can't enter a blank\"));\n    }\n\n    if (passwordKeys.join('') !== confirmPasswordKeys.join('')) {\n      return res(ctx.status(400, 'Passwords do not match'));\n    }\n\n    return res(ctx.status(200), ctx.text(passwordKeys.join('')));\n  } catch {\n    return res(ctx.status(400, 'input decryption failed'));\n  }\n};\n\nfunction extractTestIdFromSVG(svgElement: string): string {\n  const regex = /data-testid=\"([^\"]+)\"/;\n  const matches = svgElement.match(regex);\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n  return '';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}