{"ast":null,"code":"/** @tossdocs-ignore */\nfunction parseHexValueStr(str) {\n  return parseInt(str, 16);\n}\nfunction isRGBDecimalValue(rgbDecimal) {\n  return 0 <= rgbDecimal && rgbDecimal <= 255;\n}\nfunction isAlphaValue(alpha) {\n  return 0 <= alpha && alpha <= 1;\n}\nfunction hexToRgba(hex) {\n  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  if (!isAlphaValue(alpha)) {\n    throw new Error(\"\\uC798\\uBABB\\uB41C \\uC54C\\uD30C\\uAC12 \\uC785\\uB2C8\\uB2E4(0~1): \".concat(alpha));\n  }\n  hex = hex.length === 7 ? hex.slice(1) : hex;\n  var r = parseHexValueStr(hex.slice(0, 2));\n  var g = parseHexValueStr(hex.slice(2, 4));\n  var b = parseHexValueStr(hex.slice(4, 6));\n  if ([r, g, b].some(function (x) {\n    return Number.isNaN(x) || !isRGBDecimalValue(x);\n  })) {\n    throw new Error(\"\\uC798\\uBABB\\uB41C hex\\uAC12 \\uC785\\uB2C8\\uB2E4.: \".concat(hex));\n  }\n  return \"rgba(\".concat(r, \",\").concat(g, \",\").concat(b, \",\").concat(alpha, \")\");\n}\nexport { hexToRgba, isAlphaValue, isRGBDecimalValue };","map":{"version":3,"names":["parseHexValueStr","str","parseInt","isRGBDecimalValue","rgbDecimal","isAlphaValue","alpha","hexToRgba","hex","arguments","length","undefined","Error","concat","slice","r","g","b","some","x","Number","isNaN"],"sources":["/Users/hongyelim/Study/Assignment/toss-fe-next2023-feature/node_modules/@toss/utils/esm/hexToRgba.mjs"],"sourcesContent":["/** @tossdocs-ignore */\nfunction parseHexValueStr(str) {\n  return parseInt(str, 16);\n}\n\nfunction isRGBDecimalValue(rgbDecimal) {\n  return 0 <= rgbDecimal && rgbDecimal <= 255;\n}\nfunction isAlphaValue(alpha) {\n  return 0 <= alpha && alpha <= 1;\n}\nfunction hexToRgba(hex) {\n  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  if (!isAlphaValue(alpha)) {\n    throw new Error(\"\\uC798\\uBABB\\uB41C \\uC54C\\uD30C\\uAC12 \\uC785\\uB2C8\\uB2E4(0~1): \".concat(alpha));\n  }\n\n  hex = hex.length === 7 ? hex.slice(1) : hex;\n  var r = parseHexValueStr(hex.slice(0, 2));\n  var g = parseHexValueStr(hex.slice(2, 4));\n  var b = parseHexValueStr(hex.slice(4, 6));\n\n  if ([r, g, b].some(function (x) {\n    return Number.isNaN(x) || !isRGBDecimalValue(x);\n  })) {\n    throw new Error(\"\\uC798\\uBABB\\uB41C hex\\uAC12 \\uC785\\uB2C8\\uB2E4.: \".concat(hex));\n  }\n\n  return \"rgba(\".concat(r, \",\").concat(g, \",\").concat(b, \",\").concat(alpha, \")\");\n}\n\nexport { hexToRgba, isAlphaValue, isRGBDecimalValue };\n"],"mappings":"AAAA;AACA,SAASA,gBAAgBA,CAACC,GAAG,EAAE;EAC7B,OAAOC,QAAQ,CAACD,GAAG,EAAE,EAAE,CAAC;AAC1B;AAEA,SAASE,iBAAiBA,CAACC,UAAU,EAAE;EACrC,OAAO,CAAC,IAAIA,UAAU,IAAIA,UAAU,IAAI,GAAG;AAC7C;AACA,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,OAAO,CAAC,IAAIA,KAAK,IAAIA,KAAK,IAAI,CAAC;AACjC;AACA,SAASC,SAASA,CAACC,GAAG,EAAE;EACtB,IAAIF,KAAK,GAAGG,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;EAEjF,IAAI,CAACJ,YAAY,CAACC,KAAK,CAAC,EAAE;IACxB,MAAM,IAAIM,KAAK,CAAC,iEAAiE,CAACC,MAAM,CAACP,KAAK,CAAC,CAAC;EAClG;EAEAE,GAAG,GAAGA,GAAG,CAACE,MAAM,KAAK,CAAC,GAAGF,GAAG,CAACM,KAAK,CAAC,CAAC,CAAC,GAAGN,GAAG;EAC3C,IAAIO,CAAC,GAAGf,gBAAgB,CAACQ,GAAG,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACzC,IAAIE,CAAC,GAAGhB,gBAAgB,CAACQ,GAAG,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACzC,IAAIG,CAAC,GAAGjB,gBAAgB,CAACQ,GAAG,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAEzC,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAACC,IAAI,CAAC,UAAUC,CAAC,EAAE;IAC9B,OAAOC,MAAM,CAACC,KAAK,CAACF,CAAC,CAAC,IAAI,CAAChB,iBAAiB,CAACgB,CAAC,CAAC;EACjD,CAAC,CAAC,EAAE;IACF,MAAM,IAAIP,KAAK,CAAC,oDAAoD,CAACC,MAAM,CAACL,GAAG,CAAC,CAAC;EACnF;EAEA,OAAO,OAAO,CAACK,MAAM,CAACE,CAAC,EAAE,GAAG,CAAC,CAACF,MAAM,CAACG,CAAC,EAAE,GAAG,CAAC,CAACH,MAAM,CAACI,CAAC,EAAE,GAAG,CAAC,CAACJ,MAAM,CAACP,KAAK,EAAE,GAAG,CAAC;AAChF;AAEA,SAASC,SAAS,EAAEF,YAAY,EAAEF,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}