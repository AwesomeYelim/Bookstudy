{"ast":null,"code":"/** @tossdocs-ignore */\nvar units = ['', '십', '백', '천', '만', '십', '백', '천', '억', '십', '백', '천', '조', '십', '백', '천', '경'];\nfunction chunk(value, byDigits) {\n  var result = [];\n  var source = String(value);\n  for (var end = source.length; end >= 1; end = end - byDigits) {\n    var start = Math.max(end - byDigits, 0);\n    var slice = source.slice(start, end);\n    result.push(Number(slice));\n  }\n  return result;\n}\nfunction createNumberFormatterBy(formatter) {\n  return function formatNumber(value, unit) {\n    if (unit < 1) {\n      // 부동소수점 오류 때문에 unit < 1인 경우 특별 처리\n      var reciprocal = 1 / unit;\n      return formatter(value * reciprocal) / reciprocal;\n    }\n    return formatter(value / unit) * unit;\n  };\n}\nvar ceilToUnit = createNumberFormatterBy(Math.ceil);\nvar floorToUnit = createNumberFormatterBy(Math.floor);\nvar roundToUnit = createNumberFormatterBy(Math.round);\nfunction formatToKoreanNumber(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var flooredVal = floorToUnit(value, options.floorUnit || 1);\n  if (flooredVal === 0) {\n    return '0';\n  }\n  return chunk(flooredVal, 4).reduce(function (prevFormatted, currChunkNum, index) {\n    if (currChunkNum === 0) {\n      return prevFormatted;\n    }\n    var val = options.formatAllDigits ? formatThousands(currChunkNum) : commaizeNumber(currChunkNum);\n    var unit = units[index * 4];\n    return \"\".concat(val).concat(unit, \" \").concat(prevFormatted);\n  }, '').trim();\n}\nfunction formatToKRW(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var formattedVal = formatToKoreanNumber(value, options);\n  if (options.shouldHaveSpaceBeforeWon === true) {\n    return \"\".concat(formattedVal, \" \\uC6D0\");\n  }\n  return \"\".concat(formattedVal, \"\\uC6D0\");\n}\nfunction commaizeNumber(value) {\n  var numStr = String(value);\n  var decimalPointIndex = numStr.indexOf('.');\n  var commaizeRegExp = /(\\d)(?=(\\d\\d\\d)+(?!\\d))/g;\n  return decimalPointIndex > -1 ? numStr.slice(0, decimalPointIndex).replace(commaizeRegExp, '$1,') + numStr.slice(decimalPointIndex) : numStr.replace(commaizeRegExp, '$1,');\n}\nfunction floorAndFormatNumber(value) {\n  return commaizeNumber(Math.floor(value));\n}\nfunction decommaizeNumber(numStr) {\n  return Number(numStr.replace(/,/g, ''));\n}\nfunction formatPhoneNumber(phoneNumber) {\n  var isSeoulNumber = phoneNumber.startsWith('02'); // 서울 국번(02)인 경우에만 지역번호가 2자리입니다.\n\n  var areaCodeEndIndex = isSeoulNumber ? 2 : 3; // 10자리 전화번호 (또는 서울인 경우, 9자리 전화번호)에 대응하기 위해서\n  // [0:areaCodeEndIndex], [areaCodeEndIndex:length-4], [length-4:length] 형식으로 나누고 join합니다.\n\n  return [phoneNumber.slice(0, areaCodeEndIndex), phoneNumber.slice(areaCodeEndIndex, phoneNumber.length - 4), phoneNumber.slice(phoneNumber.length - 4)].join('-');\n}\nfunction formatThousands(num) {\n  var numString = String(num).split('').reverse().map(function (digit, index) {\n    return digit !== '0' ? \"\".concat(digit !== '1' ? digit : '').concat(units[index]) : '';\n  }).reverse().join('');\n  return numString;\n}\nfunction formatBusinessRegistrationNumber(businessRegistrationNumber) {\n  if (businessRegistrationNumber.length !== 10) {\n    throw new Error('사업자등록번호는 반드시 길이가 10 이어야 합니다.');\n  }\n  if (/^\\d+$/.test(businessRegistrationNumber) === false) {\n    throw new Error('사업자등록번호는 [0-9] 이어야 합니다.');\n  }\n  return businessRegistrationNumber.replace(/(\\d{3})(\\d{2})(\\d{5})/, '$1-$2-$3');\n}\nexport { ceilToUnit, commaizeNumber, decommaizeNumber, floorAndFormatNumber, floorToUnit, formatBusinessRegistrationNumber, formatPhoneNumber, formatToKRW, formatToKoreanNumber, roundToUnit };","map":{"version":3,"names":["units","chunk","value","byDigits","result","source","String","end","length","start","Math","max","slice","push","Number","createNumberFormatterBy","formatter","formatNumber","unit","reciprocal","ceilToUnit","ceil","floorToUnit","floor","roundToUnit","round","formatToKoreanNumber","options","arguments","undefined","flooredVal","floorUnit","reduce","prevFormatted","currChunkNum","index","val","formatAllDigits","formatThousands","commaizeNumber","concat","trim","formatToKRW","formattedVal","shouldHaveSpaceBeforeWon","numStr","decimalPointIndex","indexOf","commaizeRegExp","replace","floorAndFormatNumber","decommaizeNumber","formatPhoneNumber","phoneNumber","isSeoulNumber","startsWith","areaCodeEndIndex","join","num","numString","split","reverse","map","digit","formatBusinessRegistrationNumber","businessRegistrationNumber","Error","test"],"sources":["/Users/hongyelim/Study/Assignment/toss-fe-next2023-feature/node_modules/@toss/utils/esm/Numbers.mjs"],"sourcesContent":["/** @tossdocs-ignore */\nvar units = ['', '십', '백', '천', '만', '십', '백', '천', '억', '십', '백', '천', '조', '십', '백', '천', '경'];\n\nfunction chunk(value, byDigits) {\n  var result = [];\n  var source = String(value);\n\n  for (var end = source.length; end >= 1; end = end - byDigits) {\n    var start = Math.max(end - byDigits, 0);\n    var slice = source.slice(start, end);\n    result.push(Number(slice));\n  }\n\n  return result;\n}\n\nfunction createNumberFormatterBy(formatter) {\n  return function formatNumber(value, unit) {\n    if (unit < 1) {\n      // 부동소수점 오류 때문에 unit < 1인 경우 특별 처리\n      var reciprocal = 1 / unit;\n      return formatter(value * reciprocal) / reciprocal;\n    }\n\n    return formatter(value / unit) * unit;\n  };\n}\n\nvar ceilToUnit = createNumberFormatterBy(Math.ceil);\nvar floorToUnit = createNumberFormatterBy(Math.floor);\nvar roundToUnit = createNumberFormatterBy(Math.round);\nfunction formatToKoreanNumber(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var flooredVal = floorToUnit(value, options.floorUnit || 1);\n\n  if (flooredVal === 0) {\n    return '0';\n  }\n\n  return chunk(flooredVal, 4).reduce(function (prevFormatted, currChunkNum, index) {\n    if (currChunkNum === 0) {\n      return prevFormatted;\n    }\n\n    var val = options.formatAllDigits ? formatThousands(currChunkNum) : commaizeNumber(currChunkNum);\n    var unit = units[index * 4];\n    return \"\".concat(val).concat(unit, \" \").concat(prevFormatted);\n  }, '').trim();\n}\nfunction formatToKRW(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var formattedVal = formatToKoreanNumber(value, options);\n\n  if (options.shouldHaveSpaceBeforeWon === true) {\n    return \"\".concat(formattedVal, \" \\uC6D0\");\n  }\n\n  return \"\".concat(formattedVal, \"\\uC6D0\");\n}\nfunction commaizeNumber(value) {\n  var numStr = String(value);\n  var decimalPointIndex = numStr.indexOf('.');\n  var commaizeRegExp = /(\\d)(?=(\\d\\d\\d)+(?!\\d))/g;\n  return decimalPointIndex > -1 ? numStr.slice(0, decimalPointIndex).replace(commaizeRegExp, '$1,') + numStr.slice(decimalPointIndex) : numStr.replace(commaizeRegExp, '$1,');\n}\nfunction floorAndFormatNumber(value) {\n  return commaizeNumber(Math.floor(value));\n}\nfunction decommaizeNumber(numStr) {\n  return Number(numStr.replace(/,/g, ''));\n}\nfunction formatPhoneNumber(phoneNumber) {\n  var isSeoulNumber = phoneNumber.startsWith('02'); // 서울 국번(02)인 경우에만 지역번호가 2자리입니다.\n\n  var areaCodeEndIndex = isSeoulNumber ? 2 : 3; // 10자리 전화번호 (또는 서울인 경우, 9자리 전화번호)에 대응하기 위해서\n  // [0:areaCodeEndIndex], [areaCodeEndIndex:length-4], [length-4:length] 형식으로 나누고 join합니다.\n\n  return [phoneNumber.slice(0, areaCodeEndIndex), phoneNumber.slice(areaCodeEndIndex, phoneNumber.length - 4), phoneNumber.slice(phoneNumber.length - 4)].join('-');\n}\n\nfunction formatThousands(num) {\n  var numString = String(num).split('').reverse().map(function (digit, index) {\n    return digit !== '0' ? \"\".concat(digit !== '1' ? digit : '').concat(units[index]) : '';\n  }).reverse().join('');\n  return numString;\n}\n\nfunction formatBusinessRegistrationNumber(businessRegistrationNumber) {\n  if (businessRegistrationNumber.length !== 10) {\n    throw new Error('사업자등록번호는 반드시 길이가 10 이어야 합니다.');\n  }\n\n  if (/^\\d+$/.test(businessRegistrationNumber) === false) {\n    throw new Error('사업자등록번호는 [0-9] 이어야 합니다.');\n  }\n\n  return businessRegistrationNumber.replace(/(\\d{3})(\\d{2})(\\d{5})/, '$1-$2-$3');\n}\n\nexport { ceilToUnit, commaizeNumber, decommaizeNumber, floorAndFormatNumber, floorToUnit, formatBusinessRegistrationNumber, formatPhoneNumber, formatToKRW, formatToKoreanNumber, roundToUnit };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}