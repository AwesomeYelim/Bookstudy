{"ast":null,"code":"/** @tossdocs-ignore */\nfunction maskAll(str) {\n  return str.replace(/./g, '*');\n}\nfunction isKoreanName(name) {\n  return /[가-힣]{2,}/.test(name);\n}\nfunction maskName(name) {\n  if (isKoreanName(name)) {\n    switch (name.length) {\n      case 2:\n        return name.replace(/([가-힣])([가-힣]+)/, '$1*');\n      default:\n        return maskExceptForEdge(name, 1);\n    }\n  } else {\n    if (name.length < 3) {\n      return name;\n    }\n    var unmaskedSideSize = name.length < 6 ? 1 : 2;\n    return maskExceptForEdge(name, unmaskedSideSize);\n  }\n}\n/**\n * 앞뒤로 N자만큼 노출하고 그 외에는 *로 변경합니다. 띄어쓰기는 무시합니다.\n * mask('hello', 1) -> h***o\n * mask('hello world', 2) -> he*** ***ld\n */\n\nfunction maskExceptForEdge(text, edgeSize) {\n  return text.slice(0, edgeSize) + text.slice(edgeSize, text.length - edgeSize).replace(/[a-zA-Z가-힇]/g, '*') + text.slice(text.length - edgeSize, text.length);\n}\nfunction isHyphenSeparated(phoneNumber) {\n  return /^\\d{2,3}-\\d{3,4}-\\d{4}$/.test(phoneNumber);\n}\nfunction isSeoulPhoneNumber(phoneNumber) {\n  return /^02\\d+$/.test(phoneNumber);\n}\nfunction maskPhoneNumber(phoneNumber) {\n  if (isHyphenSeparated(phoneNumber)) {\n    return phoneNumber.replace(/^(\\d{2,3})-(\\d{3,4})-(\\d{4})$/, function (_, p1, p2, p3) {\n      return \"\".concat(p1, \"-\").concat(maskAll(p2), \"-\").concat(p3);\n    });\n  }\n  if (isSeoulPhoneNumber(phoneNumber)) {\n    return phoneNumber.replace(/^02(\\d{3,4})(\\d{4})/, function (_, p1, p2) {\n      return \"02\".concat(maskAll(p1)).concat(p2);\n    });\n  }\n  return phoneNumber.replace(/^(\\d{3})(\\d{3,4})(\\d{4})/, function (_, p1, p2, p3) {\n    return \"\".concat(p1).concat(maskAll(p2)).concat(p3);\n  });\n}\nvar Masker = {\n  maskName: maskName,\n  maskPhoneNumber: maskPhoneNumber\n};\nexport { Masker };","map":{"version":3,"names":["maskAll","str","replace","isKoreanName","name","test","maskName","length","maskExceptForEdge","unmaskedSideSize","text","edgeSize","slice","isHyphenSeparated","phoneNumber","isSeoulPhoneNumber","maskPhoneNumber","_","p1","p2","p3","concat","Masker"],"sources":["C:/Users/User/Desktop/yelim/Study/Assignment/toss-fe-next2023-feature/node_modules/@toss/utils/esm/Masker.mjs"],"sourcesContent":["/** @tossdocs-ignore */\nfunction maskAll(str) {\n  return str.replace(/./g, '*');\n}\n\nfunction isKoreanName(name) {\n  return /[가-힣]{2,}/.test(name);\n}\n\nfunction maskName(name) {\n  if (isKoreanName(name)) {\n    switch (name.length) {\n      case 2:\n        return name.replace(/([가-힣])([가-힣]+)/, '$1*');\n\n      default:\n        return maskExceptForEdge(name, 1);\n    }\n  } else {\n    if (name.length < 3) {\n      return name;\n    }\n\n    var unmaskedSideSize = name.length < 6 ? 1 : 2;\n    return maskExceptForEdge(name, unmaskedSideSize);\n  }\n}\n/**\n * 앞뒤로 N자만큼 노출하고 그 외에는 *로 변경합니다. 띄어쓰기는 무시합니다.\n * mask('hello', 1) -> h***o\n * mask('hello world', 2) -> he*** ***ld\n */\n\n\nfunction maskExceptForEdge(text, edgeSize) {\n  return text.slice(0, edgeSize) + text.slice(edgeSize, text.length - edgeSize).replace(/[a-zA-Z가-힇]/g, '*') + text.slice(text.length - edgeSize, text.length);\n}\n\nfunction isHyphenSeparated(phoneNumber) {\n  return /^\\d{2,3}-\\d{3,4}-\\d{4}$/.test(phoneNumber);\n}\n\nfunction isSeoulPhoneNumber(phoneNumber) {\n  return /^02\\d+$/.test(phoneNumber);\n}\n\nfunction maskPhoneNumber(phoneNumber) {\n  if (isHyphenSeparated(phoneNumber)) {\n    return phoneNumber.replace(/^(\\d{2,3})-(\\d{3,4})-(\\d{4})$/, function (_, p1, p2, p3) {\n      return \"\".concat(p1, \"-\").concat(maskAll(p2), \"-\").concat(p3);\n    });\n  }\n\n  if (isSeoulPhoneNumber(phoneNumber)) {\n    return phoneNumber.replace(/^02(\\d{3,4})(\\d{4})/, function (_, p1, p2) {\n      return \"02\".concat(maskAll(p1)).concat(p2);\n    });\n  }\n\n  return phoneNumber.replace(/^(\\d{3})(\\d{3,4})(\\d{4})/, function (_, p1, p2, p3) {\n    return \"\".concat(p1).concat(maskAll(p2)).concat(p3);\n  });\n}\n\nvar Masker = {\n  maskName: maskName,\n  maskPhoneNumber: maskPhoneNumber\n};\n\nexport { Masker };\n"],"mappings":"AAAA;AACA,SAASA,OAAOA,CAACC,GAAG,EAAE;EACpB,OAAOA,GAAG,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AAC/B;AAEA,SAASC,YAAYA,CAACC,IAAI,EAAE;EAC1B,OAAO,WAAW,CAACC,IAAI,CAACD,IAAI,CAAC;AAC/B;AAEA,SAASE,QAAQA,CAACF,IAAI,EAAE;EACtB,IAAID,YAAY,CAACC,IAAI,CAAC,EAAE;IACtB,QAAQA,IAAI,CAACG,MAAM;MACjB,KAAK,CAAC;QACJ,OAAOH,IAAI,CAACF,OAAO,CAAC,iBAAiB,EAAE,KAAK,CAAC;MAE/C;QACE,OAAOM,iBAAiB,CAACJ,IAAI,EAAE,CAAC,CAAC;IACrC;EACF,CAAC,MAAM;IACL,IAAIA,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;MACnB,OAAOH,IAAI;IACb;IAEA,IAAIK,gBAAgB,GAAGL,IAAI,CAACG,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAC9C,OAAOC,iBAAiB,CAACJ,IAAI,EAAEK,gBAAgB,CAAC;EAClD;AACF;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASD,iBAAiBA,CAACE,IAAI,EAAEC,QAAQ,EAAE;EACzC,OAAOD,IAAI,CAACE,KAAK,CAAC,CAAC,EAAED,QAAQ,CAAC,GAAGD,IAAI,CAACE,KAAK,CAACD,QAAQ,EAAED,IAAI,CAACH,MAAM,GAAGI,QAAQ,CAAC,CAACT,OAAO,CAAC,cAAc,EAAE,GAAG,CAAC,GAAGQ,IAAI,CAACE,KAAK,CAACF,IAAI,CAACH,MAAM,GAAGI,QAAQ,EAAED,IAAI,CAACH,MAAM,CAAC;AAC9J;AAEA,SAASM,iBAAiBA,CAACC,WAAW,EAAE;EACtC,OAAO,yBAAyB,CAACT,IAAI,CAACS,WAAW,CAAC;AACpD;AAEA,SAASC,kBAAkBA,CAACD,WAAW,EAAE;EACvC,OAAO,SAAS,CAACT,IAAI,CAACS,WAAW,CAAC;AACpC;AAEA,SAASE,eAAeA,CAACF,WAAW,EAAE;EACpC,IAAID,iBAAiB,CAACC,WAAW,CAAC,EAAE;IAClC,OAAOA,WAAW,CAACZ,OAAO,CAAC,+BAA+B,EAAE,UAAUe,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;MACnF,OAAO,EAAE,CAACC,MAAM,CAACH,EAAE,EAAE,GAAG,CAAC,CAACG,MAAM,CAACrB,OAAO,CAACmB,EAAE,CAAC,EAAE,GAAG,CAAC,CAACE,MAAM,CAACD,EAAE,CAAC;IAC/D,CAAC,CAAC;EACJ;EAEA,IAAIL,kBAAkB,CAACD,WAAW,CAAC,EAAE;IACnC,OAAOA,WAAW,CAACZ,OAAO,CAAC,qBAAqB,EAAE,UAAUe,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAE;MACrE,OAAO,IAAI,CAACE,MAAM,CAACrB,OAAO,CAACkB,EAAE,CAAC,CAAC,CAACG,MAAM,CAACF,EAAE,CAAC;IAC5C,CAAC,CAAC;EACJ;EAEA,OAAOL,WAAW,CAACZ,OAAO,CAAC,0BAA0B,EAAE,UAAUe,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;IAC9E,OAAO,EAAE,CAACC,MAAM,CAACH,EAAE,CAAC,CAACG,MAAM,CAACrB,OAAO,CAACmB,EAAE,CAAC,CAAC,CAACE,MAAM,CAACD,EAAE,CAAC;EACrD,CAAC,CAAC;AACJ;AAEA,IAAIE,MAAM,GAAG;EACXhB,QAAQ,EAAEA,QAAQ;EAClBU,eAAe,EAAEA;AACnB,CAAC;AAED,SAASM,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}