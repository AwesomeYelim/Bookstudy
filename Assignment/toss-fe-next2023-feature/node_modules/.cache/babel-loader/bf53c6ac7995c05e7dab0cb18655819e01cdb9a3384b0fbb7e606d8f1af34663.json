{"ast":null,"code":"import { slicedToArray as _slicedToArray, objectSpread2 as _objectSpread2, defineProperty as _defineProperty } from './_virtual/_rollupPluginBabelHelpers.mjs';\n\n/** @tossdocs-ignore */\n\n/**\n * GET 파라미터로 전달되는 쿼리 스트링을 제작합니다.\n * 주의: params가 비었을 경우, 빈 문자열을 반환하지만, params에 키-값 쌍이 존재하면 `?`가 앞에 추가됩니다.\n * @example\n * createQueryString({ a: 1, b: 2, c: '가나다' }) // '?a=1&b=2&c=%EA%B0%80%EB%82%98%EB%8B%A4',\n * createQueryString({}) // ''\n * @param  {Params} params 프로퍼티의 이름은 string이고, 값은 string | number | string[] | number[]이어야 합니다.\n */\nfunction createQueryString(params) {\n  var queryString = createSearchParamString(params);\n  if (queryString === '') {\n    return '';\n  }\n  return \"?\".concat(queryString);\n}\n/**\n * 전달하는 object를 nilable value를 필터링하고 URLSearchParams로 파싱하고 string을 반환합니다.\n * @example\n * createSearchParamString({ foo: 1, bar: ['a', 'b'], baz: undefined }) // foo=1&bar=a&bar=b\n * @param params query로 변환하고자 하는 object\n */\n\nfunction createSearchParamString(params) {\n  return new URLSearchParams(Object.entries(params).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      value = _ref2[1];\n    return value != null;\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      key = _ref4[0],\n      value = _ref4[1];\n    if (Array.isArray(value)) {\n      return value.map(function (x) {\n        return [key, x];\n      });\n    }\n    return [[key, value]];\n  }).flat()).toString() // RFC1738 -> RFC3986 스펙에 맞게 space character를 변환합니다.\n  .replace(/\\+/g, '%20');\n}\n/**\n * URL 쿼리 문자열을 파싱하여 타입 파라미터 `Result` 형식으로 반환합니다.\n * @param [queryString=location.search] - 파싱 대상 문자열(`?foo=bar` 형태), 기본값 `location.search`\n * @warn\n * parseQueryString을 첫 번째 파라미터 없이 사용하는 것은 SSR unsafe합니다.\n */\n\nfunction parseQueryString() {\n  var queryString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : typeof location !== 'undefined' ? location.search : '';\n  var query = queryString.trim().replace(/^[?#&]/, '');\n  return fromEntries(new URLSearchParams(query));\n}\nfunction fromEntries(iterable) {\n  var result = {};\n  for (var _i = 0, _Array$from = Array.from(iterable); _i < _Array$from.length; _i++) {\n    var _Array$from$_i = _slicedToArray(_Array$from[_i], 2),\n      key = _Array$from$_i[0],\n      value = _Array$from$_i[1];\n    if (result[key]) {\n      if (Array.isArray(result[key])) {\n        result[key].push(value);\n      } else {\n        result[key] = [result[key], value];\n      }\n    } else {\n      result[key] = value;\n    }\n  }\n  return result;\n}\nfunction getQueryString(name, parser) {\n  var value = QS.parse()[name];\n  if (parser == null || value == null) {\n    return value;\n  } else {\n    return parser(value);\n  }\n}\nfunction setQueryString(search, key, value) {\n  var parsed = parseQueryString(search);\n  return createQueryString(_objectSpread2(_objectSpread2({}, parsed), {}, _defineProperty({}, key, value)));\n}\n/**\n * @name QS\n * @description\n * queryString과 관련된 유틸리티 함수를 모아놓은 모듈입니다. `QS`는 세 유틸리티 함수들을 묶어서 export한 객체입니다.\n */\n\nvar QS = {\n  /**\n   * @name QS.create (createQueryString)\n   * @description\n   * GET 파라미터로 전달되는 쿼리 스트링을 제작합니다.\n   *\n   * - 첫 번째 파라미터 Record의 key는 string이고, 값은 string | number | string[] | number[]이어야 합니다.\n   * - 주의: params가 비었을 경우, 빈 문자열을 반환하지만, params에 키-값 쌍이 존재하면 `?`가 앞에 추가됩니다.\n   *\n   * ```typescript\n   * QS.create(\n   *   // 쿼리 파라미터로 바꿀 문자열\n   *   obj: Record<string, string | number | string[] | number[]>\n   * ): string\n   * ```\n   *\n   * @example\n   * QS.create({ a: 1, b: 2, c: '가나다' }) // '?a=1&b=2&c=%EA%B0%80%EB%82%98%EB%8B%A4'\n   * QS.create({}) // ''\n   */\n  create: createQueryString,\n  /**\n   * @name QS.parse (parseQueryString)\n   * @description\n   * URL 쿼리 문자열을 파싱하여 타입 파라미터 `Result` 형식으로 반환합니다.\n   *\n   * - 주의: QS.parse를 첫 번째 파라미터 없이 사용하는 것은 SSR unsafe합니다.\n   *\n   * ```typescript\n   * QS.parse<Result = Record<string, string>>(\n   *   // 파싱할 쿼리 스트링\n   *   // @default location.search 값\n   *   queryString: string\n   * ): Result\n   * ```\n   *\n   * @example\n   * QS.parse('?prop1=%EC%A0%95%EC%B9%98%20%ED%9B%84%EC%9B%90%EA%B8%88') // { 'prop1': '정치 후원금' }\n   */\n  parse: parseQueryString,\n  /**\n   * @name QS.get (getQueryString)\n   * @description\n   * 현재 쿼리 파라미터의 값을 가져옵니다.\n   *\n   * ```typescript\n   * QS.get<T>(\n   *   // 가져올 쿼리 파라미터의 키\n   *   name: string\n   * ): T\n   * ```\n   */\n  get: getQueryString,\n  /**\n   * @name QS.set (setQueryString)\n   * 주어진 쿼리 스트링에 새로운 값을 추가하거나, 값을 수정합니다.\n   * ```typescript\n   * QS.set(\n   *   // 수정할 쿼리 파라미터 문자열\n   *   qs: string\n   *   // 추가할 쿼리 파라미터의 키\n   *   key: string,\n   *   // 추가할 쿼리 파라미터의 값\n   *   value: string\n   * ): string\n   * ```\n   * @example\n   * QS.set('?with_space=hi%20hi', 'referrer', 'foo') // '?with_space=hi%20hi&referrer=foo'\n   */\n  set: setQueryString\n};\nexport { QS, createQueryString, createSearchParamString, parseQueryString, setQueryString };","map":{"version":3,"names":["slicedToArray","_slicedToArray","objectSpread2","_objectSpread2","defineProperty","_defineProperty","createQueryString","params","queryString","createSearchParamString","concat","URLSearchParams","Object","entries","filter","_ref","_ref2","value","map","_ref3","_ref4","key","Array","isArray","x","flat","toString","replace","parseQueryString","arguments","length","undefined","location","search","query","trim","fromEntries","iterable","result","_i","_Array$from","from","_Array$from$_i","push","getQueryString","name","parser","QS","parse","setQueryString","parsed","create","get","set"],"sources":["C:/Users/User/Desktop/yelim/Study/Assignment/toss-fe-next2023-feature/node_modules/@toss/utils/esm/queryString.mjs"],"sourcesContent":["import { slicedToArray as _slicedToArray, objectSpread2 as _objectSpread2, defineProperty as _defineProperty } from './_virtual/_rollupPluginBabelHelpers.mjs';\n\n/** @tossdocs-ignore */\n\n/**\n * GET 파라미터로 전달되는 쿼리 스트링을 제작합니다.\n * 주의: params가 비었을 경우, 빈 문자열을 반환하지만, params에 키-값 쌍이 존재하면 `?`가 앞에 추가됩니다.\n * @example\n * createQueryString({ a: 1, b: 2, c: '가나다' }) // '?a=1&b=2&c=%EA%B0%80%EB%82%98%EB%8B%A4',\n * createQueryString({}) // ''\n * @param  {Params} params 프로퍼티의 이름은 string이고, 값은 string | number | string[] | number[]이어야 합니다.\n */\nfunction createQueryString(params) {\n  var queryString = createSearchParamString(params);\n\n  if (queryString === '') {\n    return '';\n  }\n\n  return \"?\".concat(queryString);\n}\n/**\n * 전달하는 object를 nilable value를 필터링하고 URLSearchParams로 파싱하고 string을 반환합니다.\n * @example\n * createSearchParamString({ foo: 1, bar: ['a', 'b'], baz: undefined }) // foo=1&bar=a&bar=b\n * @param params query로 변환하고자 하는 object\n */\n\nfunction createSearchParamString(params) {\n  return new URLSearchParams(Object.entries(params).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        value = _ref2[1];\n\n    return value != null;\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n\n    if (Array.isArray(value)) {\n      return value.map(function (x) {\n        return [key, x];\n      });\n    }\n\n    return [[key, value]];\n  }).flat()).toString() // RFC1738 -> RFC3986 스펙에 맞게 space character를 변환합니다.\n  .replace(/\\+/g, '%20');\n}\n/**\n * URL 쿼리 문자열을 파싱하여 타입 파라미터 `Result` 형식으로 반환합니다.\n * @param [queryString=location.search] - 파싱 대상 문자열(`?foo=bar` 형태), 기본값 `location.search`\n * @warn\n * parseQueryString을 첫 번째 파라미터 없이 사용하는 것은 SSR unsafe합니다.\n */\n\nfunction parseQueryString() {\n  var queryString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : typeof location !== 'undefined' ? location.search : '';\n  var query = queryString.trim().replace(/^[?#&]/, '');\n  return fromEntries(new URLSearchParams(query));\n}\n\nfunction fromEntries(iterable) {\n  var result = {};\n\n  for (var _i = 0, _Array$from = Array.from(iterable); _i < _Array$from.length; _i++) {\n    var _Array$from$_i = _slicedToArray(_Array$from[_i], 2),\n        key = _Array$from$_i[0],\n        value = _Array$from$_i[1];\n\n    if (result[key]) {\n      if (Array.isArray(result[key])) {\n        result[key].push(value);\n      } else {\n        result[key] = [result[key], value];\n      }\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n}\n\nfunction getQueryString(name, parser) {\n  var value = QS.parse()[name];\n\n  if (parser == null || value == null) {\n    return value;\n  } else {\n    return parser(value);\n  }\n}\n\nfunction setQueryString(search, key, value) {\n  var parsed = parseQueryString(search);\n  return createQueryString(_objectSpread2(_objectSpread2({}, parsed), {}, _defineProperty({}, key, value)));\n}\n/**\n * @name QS\n * @description\n * queryString과 관련된 유틸리티 함수를 모아놓은 모듈입니다. `QS`는 세 유틸리티 함수들을 묶어서 export한 객체입니다.\n */\n\nvar QS = {\n  /**\n   * @name QS.create (createQueryString)\n   * @description\n   * GET 파라미터로 전달되는 쿼리 스트링을 제작합니다.\n   *\n   * - 첫 번째 파라미터 Record의 key는 string이고, 값은 string | number | string[] | number[]이어야 합니다.\n   * - 주의: params가 비었을 경우, 빈 문자열을 반환하지만, params에 키-값 쌍이 존재하면 `?`가 앞에 추가됩니다.\n   *\n   * ```typescript\n   * QS.create(\n   *   // 쿼리 파라미터로 바꿀 문자열\n   *   obj: Record<string, string | number | string[] | number[]>\n   * ): string\n   * ```\n   *\n   * @example\n   * QS.create({ a: 1, b: 2, c: '가나다' }) // '?a=1&b=2&c=%EA%B0%80%EB%82%98%EB%8B%A4'\n   * QS.create({}) // ''\n   */\n  create: createQueryString,\n\n  /**\n   * @name QS.parse (parseQueryString)\n   * @description\n   * URL 쿼리 문자열을 파싱하여 타입 파라미터 `Result` 형식으로 반환합니다.\n   *\n   * - 주의: QS.parse를 첫 번째 파라미터 없이 사용하는 것은 SSR unsafe합니다.\n   *\n   * ```typescript\n   * QS.parse<Result = Record<string, string>>(\n   *   // 파싱할 쿼리 스트링\n   *   // @default location.search 값\n   *   queryString: string\n   * ): Result\n   * ```\n   *\n   * @example\n   * QS.parse('?prop1=%EC%A0%95%EC%B9%98%20%ED%9B%84%EC%9B%90%EA%B8%88') // { 'prop1': '정치 후원금' }\n   */\n  parse: parseQueryString,\n\n  /**\n   * @name QS.get (getQueryString)\n   * @description\n   * 현재 쿼리 파라미터의 값을 가져옵니다.\n   *\n   * ```typescript\n   * QS.get<T>(\n   *   // 가져올 쿼리 파라미터의 키\n   *   name: string\n   * ): T\n   * ```\n   */\n  get: getQueryString,\n\n  /**\n   * @name QS.set (setQueryString)\n   * 주어진 쿼리 스트링에 새로운 값을 추가하거나, 값을 수정합니다.\n   * ```typescript\n   * QS.set(\n   *   // 수정할 쿼리 파라미터 문자열\n   *   qs: string\n   *   // 추가할 쿼리 파라미터의 키\n   *   key: string,\n   *   // 추가할 쿼리 파라미터의 값\n   *   value: string\n   * ): string\n   * ```\n   * @example\n   * QS.set('?with_space=hi%20hi', 'referrer', 'foo') // '?with_space=hi%20hi&referrer=foo'\n   */\n  set: setQueryString\n};\n\nexport { QS, createQueryString, createSearchParamString, parseQueryString, setQueryString };\n"],"mappings":"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,CAAC;EACtB;AACF;AAEA,SAASgC,cAAcA,CAAChB,MAAM,EAAEZ,GAAG,EAAEJ,KAAK,EAAE;EAC1C,IAAIiC,MAAM,GAAGtB,gBAAgB,CAACK,MAAM,CAAC;EACrC,OAAO3B,iBAAiB,CAACH,cAAc,CAACA,cAAc,CAAC,CAAC,CAAC,EAAE+C,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE7C,eAAe,CAAC,CAAC,CAAC,EAAEgB,GAAG,EAAEJ,KAAK,CAAC,CAAC,CAAC;AAC3G;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI8B,EAAE,GAAG;EACP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,MAAM,EAAE7C,iBAAiB;EAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0C,KAAK,EAAEpB,gBAAgB;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEwB,GAAG,EAAER,cAAc;EAEnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,GAAG,EAAEJ;AACP,CAAC;AAED,SAASF,EAAE,EAAEzC,iBAAiB,EAAEG,uBAAuB,EAAEmB,gBAAgB,EAAEqB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}